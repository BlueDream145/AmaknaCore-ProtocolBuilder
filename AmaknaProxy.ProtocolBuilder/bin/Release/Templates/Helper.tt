<#@ assembly name="System.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="AmaknaProxy.ProtocolBuilder" #>
<#@ import namespace="AmaknaProxy.ProtocolBuilder.Parsing" #>
<#@ import namespace="AmaknaProxy.ProtocolBuilder.XmlPatterns" #>

<#+
void WriteField(FieldInfo field)
{
	switch (field.Modifiers)
	{
		case AccessModifiers.Public:
			Write("public ");
			break;
		case AccessModifiers.Protected:
			Write("protected ");
			break;
		case AccessModifiers.Private:
			Write("private ");
			break;
		case AccessModifiers.Internal:
			Write("internal ");
			break;
	}

	if (field.IsConst)
	{
		Write("const ");
	}

	if (field.IsStatic)
	{
		Write("static ");
	}

	Write(field.Type.Replace("float", "double") + " ");
	Write(field.Name);

	if (!string.IsNullOrEmpty(field.Value))
	{
		Write(" = " + field.Value);
	}

	Write(";");
	WriteLine("");
}

void WriteField(XmlField field)
{
    Write("public ");

    Write(GetRealType(field.Type).Replace("float", "double"));
    Write(" " + field.Name);

    WriteLine(";");
} 
    
XmlField[] GetHierarchyFields(XmlMessage message)
{
	if (message.Heritage == string.Empty ||
        message.Heritage == "Message")
		return new XmlField[0];

    var baseMessage = Program.Configuration.XmlMessagesProfile.SearchXmlPattern(message.Heritage);

	if (baseMessage == null)
        return new XmlField[0];

    return GetHierarchyFields(baseMessage).Concat(baseMessage.Fields).ToArray();
}

XmlField[] GetHierarchyFields(XmlType type)
{
    if (type.Heritage == string.Empty ||
        type.Heritage == "Object")
        return new XmlField[0];

    var baseType = Program.Configuration.XmlTypesProfile.SearchXmlPattern(type.Heritage);

    if (baseType == null)
        return new XmlField[0];

    return GetHierarchyFields(baseType).Concat(baseType.Fields).ToArray();
}
    
void WriteIOMethodStatements(IEnumerable<XmlField> fields, bool serializeMethod)
{
	bool limitDefined = false;
    int? flagsCount = null;
    int? lastFlagOffset = null;
    foreach(var field in fields)
    {
		string limit = field.Limit;
		string type = field.Type;
		string name = field.Name;

		bool array = false;

		if (type.EndsWith("[]"))
		{
            array = true;
            
			if (string.IsNullOrEmpty(limit))
			{
				if (!serializeMethod)
				{
					if(type.StartsWith("byte") || type.StartsWith("sbyte") || type.StartsWith("string") || type.StartsWith("ushort"))
					{
						WriteLine((limitDefined ? string.Empty : "var ") + "limit = (ushort)reader.ReadVarInt();");
					}
					else
					{
						WriteLine((limitDefined ? string.Empty : "var ") + "limit = (ushort)reader.ReadUShort();");
					}
					limitDefined = true;
				}

				limit = "limit";

				if (serializeMethod)
				{
                    if (Program.Configuration.UseIEnumerable)
					{
						if(type.StartsWith("byte") || type.StartsWith("sbyte") || type.StartsWith("string") || type.StartsWith("ushort"))
						{
							WriteLine("writer.WriteVarInt((ushort)" + name + ".Count());");
						}
						else
						{
							WriteLine("writer.WriteShort((short)" + name + ".Count());");
						}
					}
					else
					{
						if(type.StartsWith("byte") || type.StartsWith("sbyte") || type.StartsWith("string") || type.StartsWith("ushort"))
						{
							WriteLine("writer.WriteVarInt((ushort)" + name + ".Length);");
						}
						else
						{
							WriteLine("writer.WriteShort((short)" + name + ".Length);");
						}
					}
				}
			}

			type = type.Substring(0, type.Length - 2);

			if (!serializeMethod)
			{
                WriteLine(string.Format("{0} = new {1}[{2}];", name, GetRealType(type), limit));
				WriteLine("for (int i = 0; i < " + limit + "; i++)");
				WriteLine("{");
				PushIndent("     ");

                name = Program.Configuration.UseIEnumerable ?
                    string.Format("({0} as {1}[])[i]", name, GetRealType(type)) :
					name + "[i]";
			}
			else
			{
				WriteLine("foreach (var entry in " + field.Name + ")");
				WriteLine("{");
				PushIndent("     ");

                name = "entry";
			}
		}

		if (serializeMethod &&
			(lastFlagOffset.HasValue && flagsCount.HasValue) &&
			(lastFlagOffset.Value >= 7 || !type.StartsWith("flag") ))
		{
			WriteLine("writer.WriteByte(flag" + flagsCount + ");");
			lastFlagOffset = null;
		}

		if (type.StartsWith("flag"))
		{
			Match match = Regex.Match(type, @"flag\((\d+)\)");

			if (match.Success)
			{
				if (!lastFlagOffset.HasValue || lastFlagOffset.Value >= 7)
				{
					flagsCount = flagsCount.HasValue ? flagsCount + 1 : 1;

					if (serializeMethod)
						WriteLine("byte flag" + flagsCount + " = 0;");
					else
						WriteLine("byte flag" + flagsCount + " = reader.ReadByte();");
				}

				int flagOffset = int.Parse(match.Groups[1].Value);
				lastFlagOffset = flagOffset;

				if (serializeMethod)
					WriteLine(string.Format("flag{0} = BooleanByteWrapper.SetFlag(flag{0}, {1}, {2});", flagsCount, flagOffset, name));
				else
					WriteLine(string.Format("{0} = BooleanByteWrapper.GetFlag(flag{1}, {2});", name, flagsCount, flagOffset));
			}
		}
		else if (type.StartsWith("Types."))
		{
			if (serializeMethod)
				WriteLine(string.Format("{0}.Serialize(writer);", name));
			else
			{
				WriteLine(string.Format("{0} = new {1}();", name, type));
				WriteLine(string.Format("{0}.Deserialize(reader);", name));
			}
		}
		else if (type.StartsWith("instance of"))
		{
         
			if (serializeMethod)
			{
				WriteLine(string.Format("writer.WriteShort({0}.TypeId);", name));
				WriteLine(string.Format("{0}.Serialize(writer);", name));
			}
			else
			{            
				Match match = Regex.Match(type, @"instance of ([\w\d_\.]+)");

				if (match.Success)
				{  
					string instanceType = match.Groups[1].Value;
                    
					WriteLine(string.Format("{0} = ProtocolTypeManager.GetInstance<{1}>(reader.ReadUShort());", name, instanceType));
					WriteLine(string.Format("{0}.Deserialize(reader);", name));
				}
				else
					Error(string.Format("Type {0} doesn't match 'instance of ([\\w\\d_\\.]+)'", type));
			}
		}
		else
		{
			if (serializeMethod)
				WriteLine(string.Format("writer.Write{0}({1});", GetIOMethodTypeName(type), name));
			else
				WriteLine(string.Format("{0} = reader.Read{1}();", name, GetIOMethodTypeName(type)));
		}
        
		if (!string.IsNullOrEmpty(field.Condition))
		{
			if (!serializeMethod)
			{
			}
		}

		if (array)
		{
			PopIndent();
            WriteLine("}");
		}
    }
        
    if (lastFlagOffset.HasValue)
    {
        if (serializeMethod)
			WriteLine("writer.WriteByte(flag" + flagsCount + ");");
    }
}

string GetRealType(string rawType)
{
    if (rawType.StartsWith("instance of "))
        rawType = rawType.Replace("instance of ", "");

    var match = Regex.Match(rawType, @"([\.\w\d_]+)\[\]");

    if (match.Success)
    {
        if (Program.Configuration.UseIEnumerable)
            return "IEnumerable<" + GetRealType(match.Groups[1].Value) + ">";

        return GetRealType(match.Groups[1].Value) + "[]";
    }

    if (rawType.StartsWith("flag"))
        return "bool";
	
	rawType = rawType.Replace("float", "double");


    switch (rawType)
    {
        case "utf":
            return "string";
        case "boolean":
            return "bool";
        default:
            return rawType;
    }
}
    
string GetIOMethodTypeName(string rawType)
{
    if (rawType.StartsWith("instance of "))
        rawType = rawType.Replace("instance of ", "");

    char[] letters = rawType.ToCharArray();

    if (rawType == "utf")
        return "UTF";

	if(rawType == "sbyte")
		rawType = "byte";

    if (rawType.StartsWith("u") || rawType == "sbyte")
    {
        letters[0] = char.ToUpper(letters[0]);
        letters[1] = char.ToUpper(letters[1]);

        return new string(letters);
    }


    letters[0] = char.ToUpper(letters[0]);

    return new string(letters);
}
#>